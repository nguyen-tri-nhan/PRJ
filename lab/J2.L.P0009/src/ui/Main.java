/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import daos.CategoryDAO;
import daos.ProductDAO;
import dtos.CategoryDTO;
import dtos.ProductDTO;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nguyentrinhan2000
 */
public final class Main extends javax.swing.JFrame {

    public static int indexSelection = 0;
    private DefaultTableModel tableModel = null;
    private DefaultListModel<String> listcategorymodel = new DefaultListModel<>();

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("J2.L.P0009");
        this.setResizable(false);
        tableModel = (DefaultTableModel) jTable.getModel();
        firstController();
    }

    public void firstController() {
        jProductID.setEnabled(false);
        jProductID.setEditable(false);
        jInsertCate.setEnabled(false);
        jInsertProduct.setEnabled(false);
        //load all product to table 
        ProductDAO productdao = new ProductDAO();
        List<ProductDTO> productlist = null;
        try {
            productlist = productdao.loadAllProduct();
            if (productlist.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No record found!");
            } else {
                tableModel.setRowCount(0);
                for (ProductDTO dto : productlist) {
                    tableModel.addRow(dto.toVector());
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
        //load all category to combobox
        CategoryDAO categorydao = new CategoryDAO();
        List<CategoryDTO> listcategory = null;
        try {
            listcategory = categorydao.loadCategory();
            if (!listcategory.isEmpty()) {
                listcategorymodel.removeAllElements();
                jCategorycb.removeAllItems();
                for (CategoryDTO dto : listcategory) {
                    jCategorycb.addItem(dto.toString());
                    listcategorymodel.addElement(dto.toString());
                }
                jCateList.setModel(listcategorymodel);
            }
        } catch (Exception e) {
        }
        jCateList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jCateList = new javax.swing.JList<>();
        jNewCate = new javax.swing.JButton();
        jSaveCate = new javax.swing.JButton();
        jDelCate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jCategorycb = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jProductID = new javax.swing.JTextField();
        jProductName = new javax.swing.JTextField();
        jQuantity = new javax.swing.JTextField();
        jPrice = new javax.swing.JTextField();
        jNewProduct = new javax.swing.JButton();
        jUpdateProduct = new javax.swing.JButton();
        jDelProduct = new javax.swing.JButton();
        jInsertProduct = new javax.swing.JButton();
        jCateName = new javax.swing.JTextField();
        jInsertCate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1168, 595));

        jCateList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jCateList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCateListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jCateList);

        jNewCate.setText("New");
        jNewCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewCateActionPerformed(evt);
            }
        });

        jSaveCate.setText("Update");
        jSaveCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveCateActionPerformed(evt);
            }
        });

        jDelCate.setText("Delete");
        jDelCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDelCateActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ProductID", "ProductName", "Price", "Quantity"
            }
        ));
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable);

        jCategorycb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCategorycbActionPerformed(evt);
            }
        });

        jLabel1.setText("Catalory");

        jLabel2.setText("Product ID");

        jLabel3.setText("Product Name");

        jLabel4.setText("Quantity");

        jLabel5.setText("Price");

        jNewProduct.setText("New");
        jNewProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewProductActionPerformed(evt);
            }
        });

        jUpdateProduct.setText("Update");
        jUpdateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateProductActionPerformed(evt);
            }
        });

        jDelProduct.setText("Delete");
        jDelProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDelProductActionPerformed(evt);
            }
        });

        jInsertProduct.setText("Insert");
        jInsertProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInsertProductActionPerformed(evt);
            }
        });

        jInsertCate.setText("Insert");
        jInsertCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInsertCateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jCateName)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jNewCate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jInsertCate)
                        .addGap(7, 7, 7)
                        .addComponent(jSaveCate)
                        .addGap(7, 7, 7)
                        .addComponent(jDelCate)))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 737, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jNewProduct)
                                .addGap(60, 60, 60)
                                .addComponent(jInsertProduct)
                                .addGap(60, 60, 60)
                                .addComponent(jUpdateProduct)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                                .addComponent(jDelProduct))
                            .addComponent(jCategorycb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jProductID)
                            .addComponent(jProductName)
                            .addComponent(jQuantity)
                            .addComponent(jPrice))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCateName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jCategorycb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jInsertProduct)
                            .addComponent(jNewProduct)
                            .addComponent(jDelProduct)
                            .addComponent(jUpdateProduct)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jNewCate)
                            .addComponent(jSaveCate)
                            .addComponent(jDelCate)
                            .addComponent(jInsertCate))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCategorycbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCategorycbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCategorycbActionPerformed

    private void jCateListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCateListMouseClicked
        // TODO add your handling code here:
        jInsertCate.setEnabled(false);
        String categoryName = jCateList.getSelectedValue();
        jCateName.setText(categoryName);
        ProductDAO productdao = new ProductDAO();
        List<ProductDTO> productlist = null;
        try {
            productlist = productdao.loadProductByCate(categoryName);
            if (productlist.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No record found!");
            } else {
                tableModel.setRowCount(0);
                for (ProductDTO dto : productlist) {
                    tableModel.addRow(dto.toVector());
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }//GEN-LAST:event_jCateListMouseClicked

    private void jNewProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewProductActionPerformed
        // TODO add your handling code here:
        firstController();
        jProductID.setEditable(true);
        jProductID.setEnabled(true);
        jInsertProduct.setEnabled(true);
        jProductID.setText("");
        jProductName.setText("");
        jPrice.setText("");
        jQuantity.setText("");
        jCategorycb.setSelectedIndex(0);
        jProductID.requestFocus();
    }//GEN-LAST:event_jNewProductActionPerformed

    private void jUpdateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateProductActionPerformed
        // TODO add your handling code here:
        String categoryName = jCategorycb.getSelectedItem().toString();
        try {
            String productID = jProductID.getText();
            String productName = jProductName.getText();
            int price = Integer.parseInt(jPrice.getText());
            int quantity = Integer.parseInt(jQuantity.getText());
            int categoryID = toReturnKey(categoryName);
            /**
             *
             * sua lai cho dung key, no se chuyen key sang so khac trong forein
             * key ko mapping ra duoc ket qua
             */
            ProductDTO dto = new ProductDTO(productID, productName, categoryID, price, quantity);
            ProductDAO dao = new ProductDAO();
            dao.updateProduct(dto);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
        jTable.updateUI();
        firstController();
    }//GEN-LAST:event_jUpdateProductActionPerformed

    private int toSelectedIndex(int ID) {
        List<CategoryDTO> listcategory = null;
        int result = -1;
        try {
            CategoryDAO cdao = new CategoryDAO();
            CategoryDTO cdto = null;
            listcategory = cdao.loadCategory();
            cdto = cdao.findByCategoryID(ID);
            String cname = cdto.getCategoryname();
            for (int i = 0; i < listcategory.size(); i++) {
                if (cname.equals(listcategory.get(i).getCategoryname())) {
                    return i;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }

    private int toReturnKey(String categoryName) {
        int key = -1;
        List<CategoryDTO> listcategory = null;
        try {
            CategoryDAO cdao = new CategoryDAO();
            CategoryDTO cdto = null;
            listcategory = cdao.loadCategory();
            for(int i = 0; i < listcategory.size(); i++){
                if (categoryName.equals(listcategory.get(i).getCategoryname())){
                    key = listcategory.get(i).getCategoryID();
                }
            }
            
        } catch (Exception e) {
        }
        return key;
    }

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        // TODO add your handling code here:
        jInsertCate.setEnabled(false);
        jInsertProduct.setEnabled(false);
        jProductID.setEnabled(false);
        int index = jTable.getSelectedRow();
        String productID = tableModel.getValueAt(index, 0).toString();
        ProductDTO dto = new ProductDTO();
        ProductDAO dao = new ProductDAO();
        try {
            dto = dao.findByProductID(productID);
            int id = dto.getCategoryID();
            jProductID.setText(dto.getProductID());
            jProductName.setText(dto.getProductname());
            jPrice.setText(String.valueOf(dto.getPrice()));
            jQuantity.setText(String.valueOf(dto.getQuantity()));
            jCategorycb.setSelectedIndex(toSelectedIndex(id));
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTableMouseClicked

    private void jInsertProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInsertProductActionPerformed
        // TODO add your handling code here:
        CategoryDAO catdao = new CategoryDAO();
        CategoryDTO catdto = null;
        try {
            String categoryName = jCategorycb.getSelectedItem().toString();
            catdto = catdao.findByCategoryName(categoryName);
        } catch (Exception ex) {
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(this, ex);
        }
        int cateID = catdto.getCategoryID();
        try {
            String productID = jProductID.getText();
            String productName = jProductName.getText();
            int price = Integer.parseInt(jPrice.getText());
            int quantity = Integer.parseInt(jQuantity.getText());
            int categoryID = cateID;
            ProductDTO dto = new ProductDTO(productID, productName, categoryID, price, quantity);
            ProductDAO dao = new ProductDAO();
            dao.insertProduct(dto);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
        jTable.updateUI();
        firstController();
    }//GEN-LAST:event_jInsertProductActionPerformed

    private void jNewCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewCateActionPerformed
        // TODO add your handling code here:
        jInsertCate.setEnabled(true);
        jCateName.requestFocus();
        jCateName.setText("");
    }//GEN-LAST:event_jNewCateActionPerformed

    private void jInsertCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInsertCateActionPerformed
        // TODO add your handling code here:
        CategoryDAO dao = new CategoryDAO();
        String[] cate = jCateName.getText().trim().split("-");
        int cateID = Integer.parseInt(cate[0].trim());
        String cateName = cate[1].trim();
        CategoryDTO dto = new CategoryDTO(cateID, cateName);
        try {
            dao.insertCategory(dto);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }
        firstController();
    }//GEN-LAST:event_jInsertCateActionPerformed

    private void jDelCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDelCateActionPerformed
        // TODO add your handling code here:
        CategoryDAO dao = new CategoryDAO();
        try {
            dao.deleteCategory(jCateList.getSelectedValue());
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex);
        }
        firstController();
    }//GEN-LAST:event_jDelCateActionPerformed

    private void jDelProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDelProductActionPerformed
        // TODO add your handling code here:
        ProductDAO dao = new ProductDAO();
        try {
            dao.deleteProduct(jProductName.getText());
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex);
        }
        firstController();

    }//GEN-LAST:event_jDelProductActionPerformed

    private void jSaveCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveCateActionPerformed
        // TODO add your handling code here:
        CategoryDAO dao = new CategoryDAO();
        CategoryDTO dto = null;
        try {
            String categoryName = jCateList.getSelectedValue();
            dto = dao.findByCategoryName(categoryName);
        } catch (Exception ex) {
            System.out.println(ex.toString());
            JOptionPane.showMessageDialog(this, ex);
        }
        int cateID = dto.getCategoryID();
        try {
            String newname = jCateName.getText();
            dto = new CategoryDTO(cateID, newname);
            dao.updateCategory(dto);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
        firstController();
    }//GEN-LAST:event_jSaveCateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> jCateList;
    private javax.swing.JTextField jCateName;
    private javax.swing.JComboBox<String> jCategorycb;
    private javax.swing.JButton jDelCate;
    private javax.swing.JButton jDelProduct;
    private javax.swing.JButton jInsertCate;
    private javax.swing.JButton jInsertProduct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton jNewCate;
    private javax.swing.JButton jNewProduct;
    private javax.swing.JTextField jPrice;
    private javax.swing.JTextField jProductID;
    private javax.swing.JTextField jProductName;
    private javax.swing.JTextField jQuantity;
    private javax.swing.JButton jSaveCate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JButton jUpdateProduct;
    // End of variables declaration//GEN-END:variables
}
